export default {
  "vue_file": "widgets/timeline-plot.vue",
  "base_filename": "timeline-plot",
  "module_dir": ".",
  "module_name": "@flexdash/node-red-fd-corewidgets",
  "resources_dir": "resources",
  "resources_path": "resources/@flexdash/node-red-fd-corewidgets",
  "name": "TimelinePlot",
  "name_text": "Timeline Plot",
  "type_kebab": "fd-timeline-plot",
  "help": "Timeline chart.\nTimelinePlot displays a time-line chart using uPlot. A timeline plot consists of a number of\ntime series, each of which is plotted as a horizontal bar whose color is determined by the\nvalue along the X time axis.\n\nThe `data` must be provided in the form expected by uPlot, which is an array of equal-length arrays\nof data values. The first of the arrays is the X axis, the rest are the series.\nThe `labels` prop is an array of strings that will be used to label the series.\n\n`colors` is a map from discrete values (numbers or strings) to colors.\n\n`gradient` may be used to define a color gradient for numerical values between `low` and\n`high` (inclusive).\nThe only 'kind' supported for now is `linear`.\nThe `low_color` and `high_color` must use hex colors, e.g., `#ff0000` for red.\n\nColors are assigned as follows:\n\n1. if a value is a number and a gradient is defined and the number falls within the range of the\n  gradient then the color is determined by the gradient.\n2. if `colors[value]` is defined then that color is used.\n3. the next color from the plot color palette is used and assigned to that value.\n\nThe click property can be used to make the rows clickable.\nA click outputs `{ label: row_label, ix: row_index, time: time_point_clicked, value: value_clicked }`.\nThe row_index is zero-based..\n\n",
  "help_title": "Timeline chart",
  "help_body": "TimelinePlot displays a time-line chart using uPlot. A timeline plot consists of a number of\ntime series, each of which is plotted as a horizontal bar whose color is determined by the\nvalue along the X time axis.\n\nThe `data` must be provided in the form expected by uPlot, which is an array of equal-length arrays\nof data values. The first of the arrays is the X axis, the rest are the series.\nThe `labels` prop is an array of strings that will be used to label the series.\n\n`colors` is a map from discrete values (numbers or strings) to colors.\n\n`gradient` may be used to define a color gradient for numerical values between `low` and\n`high` (inclusive).\nThe only 'kind' supported for now is `linear`.\nThe `low_color` and `high_color` must use hex colors, e.g., `#ff0000` for red.\n\nColors are assigned as follows:\n\n1. if a value is a number and a gradient is defined and the number falls within the range of the\n  gradient then the color is determined by the gradient.\n2. if `colors[value]` is defined then that color is used.\n3. the next color from the plot color palette is used and assigned to that value.\n\nThe click property can be used to make the rows clickable.\nA click outputs `{ label: row_label, ix: row_index, time: time_point_clicked, value: value_clicked }`.\nThe row_index is zero-based..",
  "output": true,
  "props": {
    "title": {
      "name": "title",
      "name_text": "Title",
      "name_kebab": "title",
      "msg_name": "title",
      "type": "string",
      "input_type": "str",
      "tip": "Text to display in the widget header. ",
      "default": "Timeline Plot",
      "default_html": "'Timeline Plot'"
    },
    "popup_info": {
      "name": "popup_info",
      "name_text": "Popup Info",
      "name_kebab": "popup-info",
      "msg_name": "popup_info",
      "type": "string",
      "input_type": "str",
      "tip": "Info text to display in (i) pop-up. ",
      "default": null,
      "default_html": null
    },
    "options": {
      "msg_name": "options",
      "name": "options",
      "name_text": "Options",
      "name_kebab": "options",
      "tip": "Raw uPlot options. ",
      "default": {},
      "default_html": "{}",
      "type": "object",
      "input_type": "json"
    },
    "data": {
      "msg_name": "payload",
      "name": "data",
      "name_text": "Payload",
      "name_kebab": "data",
      "tip": "Array of equal-length series, the first series being the X axis. ",
      "default": null,
      "default_html": null,
      "type": "array",
      "input_type": "json"
    },
    "colors": {
      "msg_name": "colors",
      "name": "colors",
      "name_text": "Colors",
      "name_kebab": "colors",
      "tip": "Map of colors for discrete values. ",
      "default": null,
      "default_html": null,
      "type": "object",
      "input_type": "json"
    },
    "labels": {
      "msg_name": "labels",
      "name": "labels",
      "name_text": "Labels",
      "name_kebab": "labels",
      "tip": "Array of labels for series. ",
      "default": null,
      "default_html": null,
      "type": "array",
      "input_type": "json"
    },
    "gradient": {
      "msg_name": "gradient",
      "name": "gradient",
      "name_text": "Gradient",
      "name_kebab": "gradient",
      "tip": "Color gradient for values: kind, low, high, low_color, high_color. ",
      "default": null,
      "default_html": null,
      "type": "object",
      "input_type": "json"
    },
    "show_values": {
      "msg_name": "show_values",
      "name": "show_values",
      "name_text": "Show Values",
      "name_kebab": "show-values",
      "tip": "Show values on bars, may be per-series array. ",
      "default": true,
      "default_html": "true",
      "input_type": "any"
    },
    "click": {
      "msg_name": "click",
      "name": "click",
      "name_text": "Click",
      "name_kebab": "click",
      "tip": "Make rows clickable. ",
      "default": true,
      "default_html": "true",
      "type": "boolean",
      "input_type": "bool"
    }
  },
  "payload_prop": "data"
}