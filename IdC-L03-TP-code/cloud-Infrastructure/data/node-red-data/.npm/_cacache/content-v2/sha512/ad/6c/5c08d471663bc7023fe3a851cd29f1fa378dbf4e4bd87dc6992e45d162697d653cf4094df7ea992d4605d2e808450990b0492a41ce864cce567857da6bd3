{"_id":"msg","_rev":"6-28137737edaf59ad1d5d9cb5ec093990","name":"msg","dist-tags":{"latest":"1.0.0"},"versions":{"0.0.0":{"author":{"name":"Einar Otto Stangvik","email":"einaros@gmail.com"},"name":"msg","version":"0.0.0","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_npmUser":{"name":"einaros","email":"einaros@gmail.com"},"_id":"msg@0.0.0","_engineSupported":true,"_npmVersion":"1.1.24","_nodeVersion":"v0.6.19","_defaultsLoaded":true,"dist":{"shasum":"66df624d1cdbef2d04360877ebf9e7b330dbb121","tarball":"https://registry.npmjs.org/msg/-/msg-0.0.0.tgz","integrity":"sha512-mifWq2suTEGt2vSYwmVZK2iSZeaRvZ4wKx2yY9xJfE9Mv0q4hgI+ey80DGSTwf7vDI44xrIT0j1LJ0xylfMWCA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID204FS9eB1ArxauuibIyGXMLWQTyI4KQnyivF++hlXyAiA6+uFBRfzaAlggsD+z/bCmdp7QXzGYVYKvUQVvY5N5Ug=="}]},"maintainers":[{"name":"einaros","email":"einaros@gmail.com"}]},"1.0.0":{"name":"msg","version":"1.0.0","description":"Elmish Message data structure","main":"msg.js","repository":{"type":"git","url":"git+https://github.com/jamesbrown0/msg.git"},"author":{"name":"James Brown","email":"npm@mesbrown.co.uk"},"license":"ISC","bugs":{"url":"https://github.com/jamesbrown0/msg/issues"},"homepage":"https://github.com/jamesbrown0/msg","gitHead":"efae854b2b59cfbc31a733c3337ff17c4f4ff37f","_id":"msg@1.0.0","scripts":{},"_shasum":"ddf532027c2c1d9ea804ddc91f8ba70660d8aedc","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"jamesbrown","email":"npm@mesbrown.co.uk"},"dist":{"shasum":"ddf532027c2c1d9ea804ddc91f8ba70660d8aedc","tarball":"https://registry.npmjs.org/msg/-/msg-1.0.0.tgz","integrity":"sha512-xGW5Kto4Y5+v9kW7TCITHNxG6XUFQdIole3eiKuWtOxNoXGXSNpzGF6nXSSHsrtF5EWWXaweDoX2GBuYJ/AboQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFrVgKU8NU5lbUavkGGK4mf/u47PO5oqKXoACW39EKhiAiBCh6OsZTHnwKBtjZ3TvIkfqM4PDWPsS1T3y5j9Swjtgw=="}]},"maintainers":[{"name":"einaros","email":"einaros@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/msg-1.0.0.tgz_1468189459099_0.3748467154800892"}}},"readme":"# MSG: Message Signal Generator\n\nExports a single function which takes an object of name -> function pairs and contructs a data structure which can be used to make an Elm Architecture / Redux style app. Inspired by [union-type](https://github.com/paldepind/union-type).\n\n295 bytes. No dependencies.\n\n## What it does\n\n```\nnpm i -S msg\n```\n\n```js\nimport Message from 'msg'\n\nconst Route = ( model, path ) => { model.route = path; return model }\nconst Select = ( model, name ) => { model.selected = name; return model }\nconst Saved = ( model, name ) => { model.saved = true; return model }\n\nconst actions = { Route, Select, Saved }\nconst Action = Message( actions )\n\nconsole.log( Action )\n```\n![](https://raw.githubusercontent.com/jamesbrown0/msg/master/img/1.png)\n```js\nconsole.log(Action.Route( '/' ))\n```\n![](https://raw.githubusercontent.com/jamesbrown0/msg/master/img/2.png)\n```js\nAction.isPrototypeOf( Action.Route() )              //=> true\nAction.isPrototypeOf( Action.Route )                //=> false\nMessage.prototype.isPrototypeOf( Action.Route() )   //=> true\nAction.Route() instanceof Message                   //=> true\n```\n\n\n## What it's for\n\nDefine effects\n```js\nconst Effect = Message(\n{ Save: ( message$, index ) => {\n  localStorage.setItem( 'selected', index )\n  return Action.Saved()\n}})\n```\n\nInitialise model\n```js\nconst init = () =>\n  ({ route: '/'\n   , selected: localStorage.getItem( 'selected' )\n   , names: [ 'Johnathan Best', 'Adonai Reynolds', 'Kasandra Ursler', 'Honora BognÃ¡r' ]\n   , saved: false\n   })\n```\n\nDefine the view\nImport update as render so it doesn't clash with our model update function\n```js\nimport yo, { update as render } from 'yo-yo' \nconst view = message$ => model => yo`\n<div>\n\t<button onclick=${ e => message$( Effect.Save( model.selected ))}>Save</button>\n\t<ul>${ model.names.map(( name, index ) => yo`\n    <li onclick=${ e => message$( Action.Select( index ))}>\n      ${ model.selected == index ? name.toUpperCase() : name }\n    </li>`)}\n\t</ul>\n  ${ model.saved ? 'Saved!' : null }\n</div>\n`\n```\n\nDefine flyd streams. Flyd has a good explanation in its [README](https://github.com/paldepind/flyd).\n\n```js\nconst update = ( model, action ) => action.value( model, ...action.args )\n\nconst instanceOf = type => msg =>\n  type.isPrototypeOf( msg )\n\nimport { stream, scan, map } from 'flyd'\nimport filter from 'flyd/module/filter'\n\nconst message$ = stream()\nconst action$ = filter( instanceOf( Action ), message$ )\nconst model$ = scan( update, init(), action$ ) // Contains the entire state of the application\nconst node$ = map( view( message$ ), model$ )  // Stream of DOM nodes to patch the document\n```\n\n`message$` is short for messageStream. `message$` is a function which takes one or zero arguments. If you pass a value to `action$`, that becomes the value returned next time `message$` is called with no argument.\n```js\nmessage$( 'example' )\nmessage$()             // => 'example'\n```\n\nThe `scan` function is like reduce. It returns a new stream based on manipulating the stream passed as its third argument. The second argument is the initial value of the returned stream. Each time something is pushed onto `action$` by calling `action$( something )`, `scan` runs `update` and passes it two arguments. 1: `model` - the last value passed to `model$`. 2: `action` - the last value passed to `action$`. The value returned by `update` becomes the new value of `model$`.\n\n\n```js\nconst container = document.querySelector( '#app' )\nscan( render, container, node$ )\n\nconst effect$ = filter( instanceOf( Effect ), message$ )\nmap( effect => message$( effect.value( ...effect.args )), effect$ )\n```\n\n\n\n","maintainers":[{"name":"einaros","email":"einaros@gmail.com"}],"time":{"modified":"2022-06-20T12:07:25.386Z","created":"2012-06-21T19:23:53.044Z","0.0.0":"2012-06-21T19:23:54.942Z","1.0.0":"2016-07-10T22:24:21.412Z"},"author":{"name":"James Brown","email":"npm@mesbrown.co.uk"},"description":"Elmish Message data structure","homepage":"https://github.com/jamesbrown0/msg","repository":{"type":"git","url":"git+https://github.com/jamesbrown0/msg.git"},"bugs":{"url":"https://github.com/jamesbrown0/msg/issues"},"license":"ISC","readmeFilename":"README.md"}